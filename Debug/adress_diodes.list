
adress_diodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e90  08003e90  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e90  08003e90  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e90  08003e90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000010  08003ea8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003ea8  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f8  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1a  00000000  00000000  00029831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bb9  00000000  00000000  0002c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba3a  00000000  00000000  00044301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b35  00000000  00000000  0004fd3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  000d88c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e4c 	.word	0x08003e4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003e4c 	.word	0x08003e4c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <__aeabi_fmul>:
 8000978:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000980:	bf1e      	ittt	ne
 8000982:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000986:	ea92 0f0c 	teqne	r2, ip
 800098a:	ea93 0f0c 	teqne	r3, ip
 800098e:	d06f      	beq.n	8000a70 <__aeabi_fmul+0xf8>
 8000990:	441a      	add	r2, r3
 8000992:	ea80 0c01 	eor.w	ip, r0, r1
 8000996:	0240      	lsls	r0, r0, #9
 8000998:	bf18      	it	ne
 800099a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800099e:	d01e      	beq.n	80009de <__aeabi_fmul+0x66>
 80009a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009ac:	fba0 3101 	umull	r3, r1, r0, r1
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009b8:	bf3e      	ittt	cc
 80009ba:	0049      	lslcc	r1, r1, #1
 80009bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009c0:	005b      	lslcc	r3, r3, #1
 80009c2:	ea40 0001 	orr.w	r0, r0, r1
 80009c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ca:	2afd      	cmp	r2, #253	; 0xfd
 80009cc:	d81d      	bhi.n	8000a0a <__aeabi_fmul+0x92>
 80009ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	4770      	bx	lr
 80009de:	f090 0f00 	teq	r0, #0
 80009e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009e6:	bf08      	it	eq
 80009e8:	0249      	lsleq	r1, r1, #9
 80009ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009f2:	3a7f      	subs	r2, #127	; 0x7f
 80009f4:	bfc2      	ittt	gt
 80009f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009fe:	4770      	bxgt	lr
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	dc5d      	bgt.n	8000ac8 <__aeabi_fmul+0x150>
 8000a0c:	f112 0f19 	cmn.w	r2, #25
 8000a10:	bfdc      	itt	le
 8000a12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	4770      	bxle	lr
 8000a18:	f1c2 0200 	rsb	r2, r2, #0
 8000a1c:	0041      	lsls	r1, r0, #1
 8000a1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a22:	f1c2 0220 	rsb	r2, r2, #32
 8000a26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a2e:	f140 0000 	adc.w	r0, r0, #0
 8000a32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a36:	bf08      	it	eq
 8000a38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a3c:	4770      	bx	lr
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a46:	bf02      	ittt	eq
 8000a48:	0040      	lsleq	r0, r0, #1
 8000a4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a4e:	3a01      	subeq	r2, #1
 8000a50:	d0f9      	beq.n	8000a46 <__aeabi_fmul+0xce>
 8000a52:	ea40 000c 	orr.w	r0, r0, ip
 8000a56:	f093 0f00 	teq	r3, #0
 8000a5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5e:	bf02      	ittt	eq
 8000a60:	0049      	lsleq	r1, r1, #1
 8000a62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a66:	3b01      	subeq	r3, #1
 8000a68:	d0f9      	beq.n	8000a5e <__aeabi_fmul+0xe6>
 8000a6a:	ea41 010c 	orr.w	r1, r1, ip
 8000a6e:	e78f      	b.n	8000990 <__aeabi_fmul+0x18>
 8000a70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a74:	ea92 0f0c 	teq	r2, ip
 8000a78:	bf18      	it	ne
 8000a7a:	ea93 0f0c 	teqne	r3, ip
 8000a7e:	d00a      	beq.n	8000a96 <__aeabi_fmul+0x11e>
 8000a80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a84:	bf18      	it	ne
 8000a86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a8a:	d1d8      	bne.n	8000a3e <__aeabi_fmul+0xc6>
 8000a8c:	ea80 0001 	eor.w	r0, r0, r1
 8000a90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f090 0f00 	teq	r0, #0
 8000a9a:	bf17      	itett	ne
 8000a9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	f091 0f00 	teqne	r1, #0
 8000aa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aaa:	d014      	beq.n	8000ad6 <__aeabi_fmul+0x15e>
 8000aac:	ea92 0f0c 	teq	r2, ip
 8000ab0:	d101      	bne.n	8000ab6 <__aeabi_fmul+0x13e>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	d10f      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ab6:	ea93 0f0c 	teq	r3, ip
 8000aba:	d103      	bne.n	8000ac4 <__aeabi_fmul+0x14c>
 8000abc:	024b      	lsls	r3, r1, #9
 8000abe:	bf18      	it	ne
 8000ac0:	4608      	movne	r0, r1
 8000ac2:	d108      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ac4:	ea80 0001 	eor.w	r0, r0, r1
 8000ac8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_fdiv>:
 8000ae0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae8:	bf1e      	ittt	ne
 8000aea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aee:	ea92 0f0c 	teqne	r2, ip
 8000af2:	ea93 0f0c 	teqne	r3, ip
 8000af6:	d069      	beq.n	8000bcc <__aeabi_fdiv+0xec>
 8000af8:	eba2 0203 	sub.w	r2, r2, r3
 8000afc:	ea80 0c01 	eor.w	ip, r0, r1
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b06:	d037      	beq.n	8000b78 <__aeabi_fdiv+0x98>
 8000b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	bf38      	it	cc
 8000b1c:	005b      	lslcc	r3, r3, #1
 8000b1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b26:	428b      	cmp	r3, r1
 8000b28:	bf24      	itt	cs
 8000b2a:	1a5b      	subcs	r3, r3, r1
 8000b2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b34:	bf24      	itt	cs
 8000b36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b42:	bf24      	itt	cs
 8000b44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b50:	bf24      	itt	cs
 8000b52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	bf18      	it	ne
 8000b5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b62:	d1e0      	bne.n	8000b26 <__aeabi_fdiv+0x46>
 8000b64:	2afd      	cmp	r2, #253	; 0xfd
 8000b66:	f63f af50 	bhi.w	8000a0a <__aeabi_fmul+0x92>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b80:	327f      	adds	r2, #127	; 0x7f
 8000b82:	bfc2      	ittt	gt
 8000b84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8c:	4770      	bxgt	lr
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	3a01      	subs	r2, #1
 8000b98:	e737      	b.n	8000a0a <__aeabi_fmul+0x92>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ba2:	bf02      	ittt	eq
 8000ba4:	0040      	lsleq	r0, r0, #1
 8000ba6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000baa:	3a01      	subeq	r2, #1
 8000bac:	d0f9      	beq.n	8000ba2 <__aeabi_fdiv+0xc2>
 8000bae:	ea40 000c 	orr.w	r0, r0, ip
 8000bb2:	f093 0f00 	teq	r3, #0
 8000bb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0049      	lsleq	r1, r1, #1
 8000bbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bc2:	3b01      	subeq	r3, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fdiv+0xda>
 8000bc6:	ea41 010c 	orr.w	r1, r1, ip
 8000bca:	e795      	b.n	8000af8 <__aeabi_fdiv+0x18>
 8000bcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d108      	bne.n	8000be8 <__aeabi_fdiv+0x108>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	f47f af7d 	bne.w	8000ad6 <__aeabi_fmul+0x15e>
 8000bdc:	ea93 0f0c 	teq	r3, ip
 8000be0:	f47f af70 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000be4:	4608      	mov	r0, r1
 8000be6:	e776      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_fdiv+0x118>
 8000bee:	024b      	lsls	r3, r1, #9
 8000bf0:	f43f af4c 	beq.w	8000a8c <__aeabi_fmul+0x114>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000bf8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bfc:	bf18      	it	ne
 8000bfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c02:	d1ca      	bne.n	8000b9a <__aeabi_fdiv+0xba>
 8000c04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c08:	f47f af5c 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000c0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	f47f af3c 	bne.w	8000a8c <__aeabi_fmul+0x114>
 8000c14:	e75f      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000c16:	bf00      	nop

08000c18 <__gesf2>:
 8000c18:	f04f 3cff 	mov.w	ip, #4294967295
 8000c1c:	e006      	b.n	8000c2c <__cmpsf2+0x4>
 8000c1e:	bf00      	nop

08000c20 <__lesf2>:
 8000c20:	f04f 0c01 	mov.w	ip, #1
 8000c24:	e002      	b.n	8000c2c <__cmpsf2+0x4>
 8000c26:	bf00      	nop

08000c28 <__cmpsf2>:
 8000c28:	f04f 0c01 	mov.w	ip, #1
 8000c2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d011      	beq.n	8000c68 <__cmpsf2+0x40>
 8000c44:	b001      	add	sp, #4
 8000c46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c4a:	bf18      	it	ne
 8000c4c:	ea90 0f01 	teqne	r0, r1
 8000c50:	bf58      	it	pl
 8000c52:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c56:	bf88      	it	hi
 8000c58:	17c8      	asrhi	r0, r1, #31
 8000c5a:	bf38      	it	cc
 8000c5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c60:	bf18      	it	ne
 8000c62:	f040 0001 	orrne.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	d102      	bne.n	8000c74 <__cmpsf2+0x4c>
 8000c6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c72:	d105      	bne.n	8000c80 <__cmpsf2+0x58>
 8000c74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c78:	d1e4      	bne.n	8000c44 <__cmpsf2+0x1c>
 8000c7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c7e:	d0e1      	beq.n	8000c44 <__cmpsf2+0x1c>
 8000c80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_cfrcmple>:
 8000c88:	4684      	mov	ip, r0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	4661      	mov	r1, ip
 8000c8e:	e7ff      	b.n	8000c90 <__aeabi_cfcmpeq>

08000c90 <__aeabi_cfcmpeq>:
 8000c90:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c92:	f7ff ffc9 	bl	8000c28 <__cmpsf2>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	bf48      	it	mi
 8000c9a:	f110 0f00 	cmnmi.w	r0, #0
 8000c9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ca0 <__aeabi_fcmpeq>:
 8000ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca4:	f7ff fff4 	bl	8000c90 <__aeabi_cfcmpeq>
 8000ca8:	bf0c      	ite	eq
 8000caa:	2001      	moveq	r0, #1
 8000cac:	2000      	movne	r0, #0
 8000cae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_fcmplt>:
 8000cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb8:	f7ff ffea 	bl	8000c90 <__aeabi_cfcmpeq>
 8000cbc:	bf34      	ite	cc
 8000cbe:	2001      	movcc	r0, #1
 8000cc0:	2000      	movcs	r0, #0
 8000cc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_fcmple>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff ffe0 	bl	8000c90 <__aeabi_cfcmpeq>
 8000cd0:	bf94      	ite	ls
 8000cd2:	2001      	movls	r0, #1
 8000cd4:	2000      	movhi	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmpge>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffd2 	bl	8000c88 <__aeabi_cfrcmple>
 8000ce4:	bf94      	ite	ls
 8000ce6:	2001      	movls	r0, #1
 8000ce8:	2000      	movhi	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmpgt>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffc8 	bl	8000c88 <__aeabi_cfrcmple>
 8000cf8:	bf34      	ite	cc
 8000cfa:	2001      	movcc	r0, #1
 8000cfc:	2000      	movcs	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_f2iz>:
 8000d04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d08:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d0c:	d30f      	bcc.n	8000d2e <__aeabi_f2iz+0x2a>
 8000d0e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d12:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d16:	d90d      	bls.n	8000d34 <__aeabi_f2iz+0x30>
 8000d18:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d20:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d24:	fa23 f002 	lsr.w	r0, r3, r2
 8000d28:	bf18      	it	ne
 8000d2a:	4240      	negne	r0, r0
 8000d2c:	4770      	bx	lr
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	4770      	bx	lr
 8000d34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d38:	d101      	bne.n	8000d3e <__aeabi_f2iz+0x3a>
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	d105      	bne.n	8000d4a <__aeabi_f2iz+0x46>
 8000d3e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d48:	4770      	bx	lr
 8000d4a:	f04f 0000 	mov.w	r0, #0
 8000d4e:	4770      	bx	lr

08000d50 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000d56:	f002 fa01 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 8000d5a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <ARGB_Init+0xd8>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <ARGB_Init+0x1c>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <ARGB_Init+0x1e>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	461a      	mov	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	fb02 f303 	mul.w	r3, r2, r3
 8000d76:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <ARGB_Init+0xdc>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <ARGB_Init+0xe0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <ARGB_Init+0xe0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <ARGB_Init+0xe0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fc3f 	bl	8000628 <__aeabi_ui2d>
 8000daa:	a31b      	add	r3, pc, #108	; (adr r3, 8000e18 <ARGB_Init+0xc8>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff f9ce 	bl	8000150 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fcae 	bl	800071c <__aeabi_d2uiz>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <ARGB_Init+0xe4>)
 8000dca:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fc2b 	bl	8000628 <__aeabi_ui2d>
 8000dd2:	a313      	add	r3, pc, #76	; (adr r3, 8000e20 <ARGB_Init+0xd0>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	f7ff f9ba 	bl	8000150 <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4610      	mov	r0, r2
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff fc9a 	bl	800071c <__aeabi_d2uiz>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <ARGB_Init+0xe8>)
 8000df2:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <ARGB_Init+0xec>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <ARGB_Init+0xe0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fee0 	bl	8003bc8 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f001 f8a9 	bl	8001f60 <HAL_Delay>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	1eb851ec 	.word	0x1eb851ec
 8000e1c:	3fe1eb85 	.word	0x3fe1eb85
 8000e20:	1eb851ec 	.word	0x1eb851ec
 8000e24:	3fd1eb85 	.word	0x3fd1eb85
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	014f8b59 	.word	0x014f8b59
 8000e30:	20000104 	.word	0x20000104
 8000e34:	2000002c 	.word	0x2000002c
 8000e38:	2000002d 	.word	0x2000002d
 8000e3c:	20000102 	.word	0x20000102

08000e40 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 f8b6 	bl	8000fba <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <ARGB_SetBrightness+0x1c>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	7013      	strb	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000

08000e74 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	4611      	mov	r1, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	4623      	mov	r3, r4
 8000e84:	80fb      	strh	r3, [r7, #6]
 8000e86:	4603      	mov	r3, r0
 8000e88:	717b      	strb	r3, [r7, #5]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	713b      	strb	r3, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d90f      	bls.n	8000eb8 <ARGB_SetRGB+0x44>
        u16_t _i = i / NUM_PIXELS;
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4a31      	ldr	r2, [pc, #196]	; (8000f60 <ARGB_SetRGB+0xec>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	0392      	lsls	r2, r2, #14
 8000eaa:	1ad2      	subs	r2, r2, r3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <ARGB_SetRGB+0xf0>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ec8:	797a      	ldrb	r2, [r7, #5]
 8000eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ece:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000ed0:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <ARGB_SetRGB+0xf0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee0:	793a      	ldrb	r2, [r7, #4]
 8000ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee6:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <ARGB_SetRGB+0xf0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	3301      	adds	r3, #1
 8000ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef8:	78fa      	ldrb	r2, [r7, #3]
 8000efa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000efe:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000f00:	793b      	ldrb	r3, [r7, #4]
 8000f02:	21b0      	movs	r1, #176	; 0xb0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f9ef 	bl	80012e8 <scale8>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	21f0      	movs	r1, #240	; 0xf0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f9e8 	bl	80012e8 <scale8>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8000f1c:	793b      	ldrb	r3, [r7, #4]
 8000f1e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8000f20:	797b      	ldrb	r3, [r7, #5]
 8000f22:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000f28:	88fa      	ldrh	r2, [r7, #6]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	490d      	ldr	r1, [pc, #52]	; (8000f68 <ARGB_SetRGB+0xf4>)
 8000f32:	7b7a      	ldrb	r2, [r7, #13]
 8000f34:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4909      	ldr	r1, [pc, #36]	; (8000f68 <ARGB_SetRGB+0xf4>)
 8000f42:	7b3a      	ldrb	r2, [r7, #12]
 8000f44:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	4905      	ldr	r1, [pc, #20]	; (8000f68 <ARGB_SetRGB+0xf4>)
 8000f52:	7afa      	ldrb	r2, [r7, #11]
 8000f54:	54ca      	strb	r2, [r1, r3]
#endif
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	cccccccd 	.word	0xcccccccd
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000030 	.word	0x20000030

08000f6c <ARGB_SetHSV>:
 * @param[in] i LED position
 * @param[in] hue HUE (color) [0..255]
 * @param[in] sat Saturation  [0..255]
 * @param[in] val Value (brightness) [0..255]
 */
void ARGB_SetHSV(u16_t i, u8_t hue, u8_t sat, u8_t val) {
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	80fb      	strh	r3, [r7, #6]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	717b      	strb	r3, [r7, #5]
 8000f82:	460b      	mov	r3, r1
 8000f84:	713b      	strb	r3, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	70fb      	strb	r3, [r7, #3]
    uint8_t _r, _g, _b;                    // init buffer color
    HSV2RGB(hue, sat, val, &_r, &_g, &_b); // get RGB color
 8000f8a:	f107 040f 	add.w	r4, r7, #15
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	7939      	ldrb	r1, [r7, #4]
 8000f92:	7978      	ldrb	r0, [r7, #5]
 8000f94:	f107 030d 	add.w	r3, r7, #13
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 030e 	add.w	r3, r7, #14
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	f000 f9b5 	bl	8001310 <HSV2RGB>
    ARGB_SetRGB(i, _r, _g, _b);     // set color
 8000fa6:	7bf9      	ldrb	r1, [r7, #15]
 8000fa8:	7bba      	ldrb	r2, [r7, #14]
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	88f8      	ldrh	r0, [r7, #6]
 8000fae:	f7ff ff61 	bl	8000e74 <ARGB_SetRGB>
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}

08000fba <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	71bb      	strb	r3, [r7, #6]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81fb      	strh	r3, [r7, #14]
 8000fd0:	e00b      	b.n	8000fea <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	b298      	uxth	r0, r3
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	79ba      	ldrb	r2, [r7, #6]
 8000fda:	79f9      	ldrb	r1, [r7, #7]
 8000fdc:	f7ff ff4a 	bl	8000e74 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000fe0:	89fb      	ldrh	r3, [r7, #14]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	81fb      	strh	r3, [r7, #14]
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d9ef      	bls.n	8000fd2 <ARGB_FillRGB+0x18>
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <ARGB_Ready>:
/**
 * @brief Get current DMA status
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Ready(void) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
    return ARGB_LOC_ST;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <ARGB_Ready+0x14>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000102 	.word	0x20000102

08001014 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 800101a:	4b9c      	ldr	r3, [pc, #624]	; (800128c <ARGB_Show+0x278>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8001020:	4b9b      	ldr	r3, [pc, #620]	; (8001290 <ARGB_Show+0x27c>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <ARGB_Show+0x22>
 800102a:	4b9a      	ldr	r3, [pc, #616]	; (8001294 <ARGB_Show+0x280>)
 800102c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d001      	beq.n	800103a <ARGB_Show+0x26>
        return ARGB_BUSY;
 8001036:	2300      	movs	r3, #0
 8001038:	e14f      	b.n	80012da <ARGB_Show+0x2c6>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e0a6      	b.n	800118e <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001040:	4b95      	ldr	r3, [pc, #596]	; (8001298 <ARGB_Show+0x284>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001054:	2b00      	cmp	r3, #0
 8001056:	dd04      	ble.n	8001062 <ARGB_Show+0x4e>
 8001058:	4b90      	ldr	r3, [pc, #576]	; (800129c <ARGB_Show+0x288>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	e003      	b.n	800106a <ARGB_Show+0x56>
 8001062:	4b8f      	ldr	r3, [pc, #572]	; (80012a0 <ARGB_Show+0x28c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4619      	mov	r1, r3
 8001070:	4b8c      	ldr	r3, [pc, #560]	; (80012a4 <ARGB_Show+0x290>)
 8001072:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001076:	4b88      	ldr	r3, [pc, #544]	; (8001298 <ARGB_Show+0x284>)
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	2b00      	cmp	r3, #0
 800108c:	dd04      	ble.n	8001098 <ARGB_Show+0x84>
 800108e:	4b83      	ldr	r3, [pc, #524]	; (800129c <ARGB_Show+0x288>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4619      	mov	r1, r3
 8001096:	e003      	b.n	80010a0 <ARGB_Show+0x8c>
 8001098:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <ARGB_Show+0x28c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4619      	mov	r1, r3
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3308      	adds	r3, #8
 80010a6:	4a7f      	ldr	r2, [pc, #508]	; (80012a4 <ARGB_Show+0x290>)
 80010a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80010ac:	4b7a      	ldr	r3, [pc, #488]	; (8001298 <ARGB_Show+0x284>)
 80010ae:	789b      	ldrb	r3, [r3, #2]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dd04      	ble.n	80010ce <ARGB_Show+0xba>
 80010c4:	4b75      	ldr	r3, [pc, #468]	; (800129c <ARGB_Show+0x288>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4619      	mov	r1, r3
 80010cc:	e003      	b.n	80010d6 <ARGB_Show+0xc2>
 80010ce:	4b74      	ldr	r3, [pc, #464]	; (80012a0 <ARGB_Show+0x28c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4619      	mov	r1, r3
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3310      	adds	r3, #16
 80010dc:	4a71      	ldr	r2, [pc, #452]	; (80012a4 <ARGB_Show+0x290>)
 80010de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80010e2:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <ARGB_Show+0x284>)
 80010e4:	78db      	ldrb	r3, [r3, #3]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	dd04      	ble.n	8001104 <ARGB_Show+0xf0>
 80010fa:	4b68      	ldr	r3, [pc, #416]	; (800129c <ARGB_Show+0x288>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4619      	mov	r1, r3
 8001102:	e003      	b.n	800110c <ARGB_Show+0xf8>
 8001104:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <ARGB_Show+0x28c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	3318      	adds	r3, #24
 8001112:	4a64      	ldr	r2, [pc, #400]	; (80012a4 <ARGB_Show+0x290>)
 8001114:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001118:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <ARGB_Show+0x284>)
 800111a:	791b      	ldrb	r3, [r3, #4]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112c:	2b00      	cmp	r3, #0
 800112e:	dd04      	ble.n	800113a <ARGB_Show+0x126>
 8001130:	4b5a      	ldr	r3, [pc, #360]	; (800129c <ARGB_Show+0x288>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	e003      	b.n	8001142 <ARGB_Show+0x12e>
 800113a:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <ARGB_Show+0x28c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	3320      	adds	r3, #32
 8001148:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <ARGB_Show+0x290>)
 800114a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800114e:	4b52      	ldr	r3, [pc, #328]	; (8001298 <ARGB_Show+0x284>)
 8001150:	795b      	ldrb	r3, [r3, #5]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	2b00      	cmp	r3, #0
 8001164:	dd04      	ble.n	8001170 <ARGB_Show+0x15c>
 8001166:	4b4d      	ldr	r3, [pc, #308]	; (800129c <ARGB_Show+0x288>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4619      	mov	r1, r3
 800116e:	e003      	b.n	8001178 <ARGB_Show+0x164>
 8001170:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <ARGB_Show+0x28c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	3328      	adds	r3, #40	; 0x28
 800117e:	4a49      	ldr	r2, [pc, #292]	; (80012a4 <ARGB_Show+0x290>)
 8001180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	3301      	adds	r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	71fb      	strb	r3, [r7, #7]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b07      	cmp	r3, #7
 8001194:	f67f af54 	bls.w	8001040 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 800119c:	e095      	b.n	80012ca <ARGB_Show+0x2b6>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <ARGB_Show+0x294>)
 80011a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d102      	bne.n	80011b0 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 80011aa:	2302      	movs	r3, #2
 80011ac:	73fb      	strb	r3, [r7, #15]
                continue;
 80011ae:	e08c      	b.n	80012ca <ARGB_Show+0x2b6>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <ARGB_Show+0x294>)
 80011b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d11d      	bne.n	80011f8 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 80011bc:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <ARGB_Show+0x294>)
 80011be:	2202      	movs	r2, #2
 80011c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 80011c4:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <ARGB_Show+0x294>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	4a38      	ldr	r2, [pc, #224]	; (80012ac <ARGB_Show+0x298>)
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <ARGB_Show+0x294>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <ARGB_Show+0x29c>)
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <ARGB_Show+0x294>)
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <ARGB_Show+0x2a0>)
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <ARGB_Show+0x294>)
 80011de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80011e0:	4930      	ldr	r1, [pc, #192]	; (80012a4 <ARGB_Show+0x290>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <ARGB_Show+0x294>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3334      	adds	r3, #52	; 0x34
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 80011e8:	461a      	mov	r2, r3
 80011ea:	2330      	movs	r3, #48	; 0x30
 80011ec:	f001 f844 	bl	8002278 <HAL_DMA_Start_IT>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <ARGB_Show+0x1f0>
 80011f6:	e002      	b.n	80011fe <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
                continue;
 80011fc:	e065      	b.n	80012ca <ARGB_Show+0x2b6>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
                continue;
 8001202:	e062      	b.n	80012ca <ARGB_Show+0x2b6>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <ARGB_Show+0x294>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <ARGB_Show+0x294>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001212:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <ARGB_Show+0x294>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <ARGB_Show+0x2a4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d107      	bne.n	800122e <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <ARGB_Show+0x294>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <ARGB_Show+0x294>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <ARGB_Show+0x294>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <ARGB_Show+0x2a4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d00e      	beq.n	8001256 <ARGB_Show+0x242>
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <ARGB_Show+0x294>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001240:	d009      	beq.n	8001256 <ARGB_Show+0x242>
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <ARGB_Show+0x294>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <ARGB_Show+0x2a8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d004      	beq.n	8001256 <ARGB_Show+0x242>
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <ARGB_Show+0x294>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <ARGB_Show+0x2ac>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d111      	bne.n	800127a <ARGB_Show+0x266>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <ARGB_Show+0x294>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b06      	cmp	r3, #6
 8001266:	d02d      	beq.n	80012c4 <ARGB_Show+0x2b0>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <ARGB_Show+0x294>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <ARGB_Show+0x294>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001278:	e024      	b.n	80012c4 <ARGB_Show+0x2b0>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <ARGB_Show+0x294>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <ARGB_Show+0x294>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e01c      	b.n	80012c6 <ARGB_Show+0x2b2>
 800128c:	20000102 	.word	0x20000102
 8001290:	20000100 	.word	0x20000100
 8001294:	2000014c 	.word	0x2000014c
 8001298:	20000030 	.word	0x20000030
 800129c:	2000002c 	.word	0x2000002c
 80012a0:	2000002d 	.word	0x2000002d
 80012a4:	20000040 	.word	0x20000040
 80012a8:	20000104 	.word	0x20000104
 80012ac:	0800154d 	.word	0x0800154d
 80012b0:	080017fd 	.word	0x080017fd
 80012b4:	08003635 	.word	0x08003635
 80012b8:	40012c00 	.word	0x40012c00
 80012bc:	40000400 	.word	0x40000400
 80012c0:	40000800 	.word	0x40000800
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80012c4:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f47f af66 	bne.w	800119e <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <ARGB_Show+0x2d0>)
 80012d4:	2202      	movs	r2, #2
 80012d6:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80012d8:	2302      	movs	r3, #2
    }
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000100 	.word	0x20000100

080012e8 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	79ba      	ldrb	r2, [r7, #6]
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	121b      	asrs	r3, r3, #8
 8001302:	b2db      	uxtb	r3, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
	...

08001310 <HSV2RGB>:
 * @param[in] val Value (brightness) [0..255]
 * @param[out] _r Pointer to RED component value
 * @param[out] _g Pointer to GREEN component value
 * @param[out] _b Pointer to BLUE component value
 */
static void HSV2RGB(u8_t hue, u8_t sat, u8_t val, u8_t *_r, u8_t *_g, u8_t *_b) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	460b      	mov	r3, r1
 800131e:	71bb      	strb	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
    if (sat == 0) { // if white color
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10b      	bne.n	8001342 <HSV2RGB+0x32>
        *_r = *_g = *_b = val;
 800132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132c:	797a      	ldrb	r2, [r7, #5]
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	701a      	strb	r2, [r3, #0]
        return;
 8001340:	e0f6      	b.n	8001530 <HSV2RGB+0x220>
    }
    // Float is smoother but check for FPU (Floating point unit) in your MCU
    // Otherwise it will take longer time in the code
    // FPU is in: F3/L3 and greater
    // Src: https://github.com/Inseckto/HSV-to-RGB
    float h = (float)hue / 255;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fabf 	bl	80008c8 <__aeabi_ui2f>
 800134a:	4603      	mov	r3, r0
 800134c:	497c      	ldr	r1, [pc, #496]	; (8001540 <HSV2RGB+0x230>)
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fbc6 	bl	8000ae0 <__aeabi_fdiv>
 8001354:	4603      	mov	r3, r0
 8001356:	61fb      	str	r3, [r7, #28]
    float s = (float)sat / 255;
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fab4 	bl	80008c8 <__aeabi_ui2f>
 8001360:	4603      	mov	r3, r0
 8001362:	4977      	ldr	r1, [pc, #476]	; (8001540 <HSV2RGB+0x230>)
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fbbb 	bl	8000ae0 <__aeabi_fdiv>
 800136a:	4603      	mov	r3, r0
 800136c:	61bb      	str	r3, [r7, #24]
    float v = (float)val / 255;
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff faa9 	bl	80008c8 <__aeabi_ui2f>
 8001376:	4603      	mov	r3, r0
 8001378:	4971      	ldr	r1, [pc, #452]	; (8001540 <HSV2RGB+0x230>)
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fbb0 	bl	8000ae0 <__aeabi_fdiv>
 8001380:	4603      	mov	r3, r0
 8001382:	617b      	str	r3, [r7, #20]

    int i = (int)floorf(h * 6);
 8001384:	496f      	ldr	r1, [pc, #444]	; (8001544 <HSV2RGB+0x234>)
 8001386:	69f8      	ldr	r0, [r7, #28]
 8001388:	f7ff faf6 	bl	8000978 <__aeabi_fmul>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fd1a 	bl	8003dc8 <floorf>
 8001394:	4603      	mov	r3, r0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fcb4 	bl	8000d04 <__aeabi_f2iz>
 800139c:	4603      	mov	r3, r0
 800139e:	613b      	str	r3, [r7, #16]
    float f = h * 6 - (float)i;
 80013a0:	4968      	ldr	r1, [pc, #416]	; (8001544 <HSV2RGB+0x234>)
 80013a2:	69f8      	ldr	r0, [r7, #28]
 80013a4:	f7ff fae8 	bl	8000978 <__aeabi_fmul>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461c      	mov	r4, r3
 80013ac:	6938      	ldr	r0, [r7, #16]
 80013ae:	f7ff fa8f 	bl	80008d0 <__aeabi_i2f>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff f9d4 	bl	8000764 <__aeabi_fsub>
 80013bc:	4603      	mov	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]
    u8_t p = (u8_t)(v * (1 - s) * 255.0);
 80013c0:	69b9      	ldr	r1, [r7, #24]
 80013c2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80013c6:	f7ff f9cd 	bl	8000764 <__aeabi_fsub>
 80013ca:	4603      	mov	r3, r0
 80013cc:	6979      	ldr	r1, [r7, #20]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fad2 	bl	8000978 <__aeabi_fmul>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f948 	bl	800066c <__aeabi_f2d>
 80013dc:	a356      	add	r3, pc, #344	; (adr r3, 8001538 <HSV2RGB+0x228>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7fe feb5 	bl	8000150 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff f995 	bl	800071c <__aeabi_d2uiz>
 80013f2:	4603      	mov	r3, r0
 80013f4:	72fb      	strb	r3, [r7, #11]
    u8_t q = (u8_t)(v * (1 - f * s) * 255.0);
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff fabd 	bl	8000978 <__aeabi_fmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001406:	f7ff f9ad 	bl	8000764 <__aeabi_fsub>
 800140a:	4603      	mov	r3, r0
 800140c:	6979      	ldr	r1, [r7, #20]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fab2 	bl	8000978 <__aeabi_fmul>
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f928 	bl	800066c <__aeabi_f2d>
 800141c:	a346      	add	r3, pc, #280	; (adr r3, 8001538 <HSV2RGB+0x228>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7fe fe95 	bl	8000150 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff f975 	bl	800071c <__aeabi_d2uiz>
 8001432:	4603      	mov	r3, r0
 8001434:	72bb      	strb	r3, [r7, #10]
    u8_t t = (u8_t)(v * (1 - (1 - f) * s)*255.0);
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800143c:	f7ff f992 	bl	8000764 <__aeabi_fsub>
 8001440:	4603      	mov	r3, r0
 8001442:	69b9      	ldr	r1, [r7, #24]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fa97 	bl	8000978 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001452:	f7ff f987 	bl	8000764 <__aeabi_fsub>
 8001456:	4603      	mov	r3, r0
 8001458:	6979      	ldr	r1, [r7, #20]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fa8c 	bl	8000978 <__aeabi_fmul>
 8001460:	4603      	mov	r3, r0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f902 	bl	800066c <__aeabi_f2d>
 8001468:	a333      	add	r3, pc, #204	; (adr r3, 8001538 <HSV2RGB+0x228>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7fe fe6f 	bl	8000150 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff f94f 	bl	800071c <__aeabi_d2uiz>
 800147e:	4603      	mov	r3, r0
 8001480:	727b      	strb	r3, [r7, #9]

    switch (i % 6) {
 8001482:	6939      	ldr	r1, [r7, #16]
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HSV2RGB+0x238>)
 8001486:	fb83 3201 	smull	r3, r2, r3, r1
 800148a:	17cb      	asrs	r3, r1, #31
 800148c:	1ad2      	subs	r2, r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	1aca      	subs	r2, r1, r3
 8001498:	2a04      	cmp	r2, #4
 800149a:	d83f      	bhi.n	800151c <HSV2RGB+0x20c>
 800149c:	a301      	add	r3, pc, #4	; (adr r3, 80014a4 <HSV2RGB+0x194>)
 800149e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80014a2:	bf00      	nop
 80014a4:	080014b9 	.word	0x080014b9
 80014a8:	080014cd 	.word	0x080014cd
 80014ac:	080014e1 	.word	0x080014e1
 80014b0:	080014f5 	.word	0x080014f5
 80014b4:	08001509 	.word	0x08001509
//    uint8_t rem = (hue - (reg * 43)) * 6;
//    uint8_t p = (val * (255 - sat)) >> 8;
//    uint8_t q = (val * (255 - ((sat * rem) >> 8))) >> 8;
//    uint8_t t = (val * (255 - ((sat * (255 - rem)) >> 8))) >> 8;
//    switch (reg) {
        case 0: *_r = val, *_g = t, *_b = p; break;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	797a      	ldrb	r2, [r7, #5]
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c0:	7a7a      	ldrb	r2, [r7, #9]
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c6:	7afa      	ldrb	r2, [r7, #11]
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e031      	b.n	8001530 <HSV2RGB+0x220>
        case 1: *_r = q, *_g = val, *_b = p; break;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	7aba      	ldrb	r2, [r7, #10]
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d4:	797a      	ldrb	r2, [r7, #5]
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014da:	7afa      	ldrb	r2, [r7, #11]
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e027      	b.n	8001530 <HSV2RGB+0x220>
        case 2: *_r = p, *_g = val, *_b = t; break;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	7afa      	ldrb	r2, [r7, #11]
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e8:	797a      	ldrb	r2, [r7, #5]
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ee:	7a7a      	ldrb	r2, [r7, #9]
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e01d      	b.n	8001530 <HSV2RGB+0x220>
        case 3: *_r = p, *_g = q, *_b = val; break;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	7afa      	ldrb	r2, [r7, #11]
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fc:	7aba      	ldrb	r2, [r7, #10]
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001502:	797a      	ldrb	r2, [r7, #5]
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e013      	b.n	8001530 <HSV2RGB+0x220>
        case 4: *_r = t, *_g = p, *_b = val; break;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	7a7a      	ldrb	r2, [r7, #9]
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001510:	7afa      	ldrb	r2, [r7, #11]
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001516:	797a      	ldrb	r2, [r7, #5]
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e009      	b.n	8001530 <HSV2RGB+0x220>
        default: *_r = val, *_g = p, *_b = q; break;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	797a      	ldrb	r2, [r7, #5]
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	7afa      	ldrb	r2, [r7, #11]
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152a:	7aba      	ldrb	r2, [r7, #10]
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	bf00      	nop
    }
}
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	bf00      	nop
 8001538:	00000000 	.word	0x00000000
 800153c:	406fe000 	.word	0x406fe000
 8001540:	437f0000 	.word	0x437f0000
 8001544:	40c00000 	.word	0x40c00000
 8001548:	2aaaaaab 	.word	0x2aaaaaab

0800154c <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a9d      	ldr	r2, [pc, #628]	; (80017d4 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 800155e:	4293      	cmp	r3, r2
 8001560:	f040 8131 	bne.w	80017c6 <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a9c      	ldr	r2, [pc, #624]	; (80017d8 <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	f040 812c 	bne.w	80017c6 <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 800156e:	4b9b      	ldr	r3, [pc, #620]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8128 	beq.w	80017ca <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	d10b      	bne.n	800159c <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d136      	bne.n	8001600 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800159a:	e031      	b.n	8001600 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d10b      	bne.n	80015be <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2202      	movs	r2, #2
 80015aa:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d125      	bne.n	8001600 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015bc:	e020      	b.n	8001600 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10b      	bne.n	80015e0 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2204      	movs	r2, #4
 80015cc:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d114      	bne.n	8001600 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015de:	e00f      	b.n	8001600 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d10a      	bne.n	8001600 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2208      	movs	r2, #8
 80015ee:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001600:	4b76      	ldr	r3, [pc, #472]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	2b04      	cmp	r3, #4
 8001608:	d87b      	bhi.n	8001702 <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 800160a:	2300      	movs	r3, #0
 800160c:	72fb      	strb	r3, [r7, #11]
 800160e:	e06c      	b.n	80016ea <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001610:	4b72      	ldr	r3, [pc, #456]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	4a70      	ldr	r2, [pc, #448]	; (80017e0 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	2b00      	cmp	r3, #0
 8001634:	dd04      	ble.n	8001640 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001636:	4b6b      	ldr	r3, [pc, #428]	; (80017e4 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	e003      	b.n	8001648 <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001640:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4619      	mov	r1, r3
 8001648:	7afb      	ldrb	r3, [r7, #11]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	3318      	adds	r3, #24
 800164e:	4a67      	ldr	r2, [pc, #412]	; (80017ec <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001654:	4b61      	ldr	r3, [pc, #388]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	b29b      	uxth	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	3301      	adds	r3, #1
 8001664:	4a5e      	ldr	r2, [pc, #376]	; (80017e0 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001678:	2b00      	cmp	r3, #0
 800167a:	dd04      	ble.n	8001686 <ARGB_TIM_DMADelayPulseCplt+0x13a>
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	e003      	b.n	800168e <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4619      	mov	r1, r3
 800168e:	7afb      	ldrb	r3, [r7, #11]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	3320      	adds	r3, #32
 8001694:	4a55      	ldr	r2, [pc, #340]	; (80017ec <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800169a:	4b50      	ldr	r3, [pc, #320]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	3302      	adds	r3, #2
 80016aa:	4a4d      	ldr	r2, [pc, #308]	; (80017e0 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 80016ac:	5cd3      	ldrb	r3, [r2, r3]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	2b00      	cmp	r3, #0
 80016c0:	dd04      	ble.n	80016cc <ARGB_TIM_DMADelayPulseCplt+0x180>
 80016c2:	4b48      	ldr	r3, [pc, #288]	; (80017e4 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	e003      	b.n	80016d4 <ARGB_TIM_DMADelayPulseCplt+0x188>
 80016cc:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	3328      	adds	r3, #40	; 0x28
 80016da:	4a44      	ldr	r2, [pc, #272]	; (80017ec <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 80016dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80016e0:	7afb      	ldrb	r3, [r7, #11]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	72fb      	strb	r3, [r7, #11]
 80016ea:	7afb      	ldrb	r3, [r7, #11]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d98e      	bls.n	8001610 <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3301      	adds	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b37      	ldr	r3, [pc, #220]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	e05d      	b.n	80017be <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001702:	4b36      	ldr	r3, [pc, #216]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	2b06      	cmp	r3, #6
 800170a:	d80c      	bhi.n	8001726 <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 800170c:	2260      	movs	r2, #96	; 0x60
 800170e:	2100      	movs	r1, #0
 8001710:	4837      	ldr	r0, [pc, #220]	; (80017f0 <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001712:	f002 fb51 	bl	8003db8 <memset>
        BUF_COUNTER++;
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	3301      	adds	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001722:	801a      	strh	r2, [r3, #0]
 8001724:	e04b      	b.n	80017be <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001728:	2200      	movs	r2, #0
 800172a:	801a      	strh	r2, [r3, #0]
        // STOP DMA:
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800173a:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fdf9 	bl	8002338 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a2a      	ldr	r2, [pc, #168]	; (80017f4 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d117      	bne.n	8001780 <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a1a      	ldr	r2, [r3, #32]
 8001756:	f241 1311 	movw	r3, #4369	; 0x1111
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10f      	bne.n	8001780 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a1a      	ldr	r2, [r3, #32]
 8001766:	f240 4344 	movw	r3, #1092	; 0x444
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	f241 1311 	movw	r3, #4369	; 0x1111
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10f      	bne.n	80017b0 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a1a      	ldr	r2, [r3, #32]
 8001796:	f240 4344 	movw	r3, #1092	; 0x444
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <ARGB_TIM_DMADelayPulseCplt+0x264>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        ARGB_LOC_ST = ARGB_READY;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	771a      	strb	r2, [r3, #28]
 80017c4:	e002      	b.n	80017cc <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80017c6:	bf00      	nop
 80017c8:	e000      	b.n	80017cc <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80017ca:	bf00      	nop
}
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000014c 	.word	0x2000014c
 80017d8:	20000104 	.word	0x20000104
 80017dc:	20000100 	.word	0x20000100
 80017e0:	20000030 	.word	0x20000030
 80017e4:	2000002c 	.word	0x2000002c
 80017e8:	2000002d 	.word	0x2000002d
 80017ec:	20000040 	.word	0x20000040
 80017f0:	200000a0 	.word	0x200000a0
 80017f4:	40012c00 	.word	0x40012c00
 80017f8:	20000102 	.word	0x20000102

080017fc <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a53      	ldr	r2, [pc, #332]	; (800195c <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 800180e:	4293      	cmp	r3, r2
 8001810:	f040 809e 	bne.w	8001950 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a52      	ldr	r2, [pc, #328]	; (8001960 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001818:	4293      	cmp	r3, r2
 800181a:	f040 8099 	bne.w	8001950 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 800181e:	4b51      	ldr	r3, [pc, #324]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8095 	beq.w	8001954 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 800182a:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b04      	cmp	r3, #4
 8001832:	d87b      	bhi.n	800192c <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	72fb      	strb	r3, [r7, #11]
 8001838:	e06c      	b.n	8001914 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	4a47      	ldr	r2, [pc, #284]	; (8001968 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	7afb      	ldrb	r3, [r7, #11]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185c:	2b00      	cmp	r3, #0
 800185e:	dd04      	ble.n	800186a <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001860:	4b42      	ldr	r3, [pc, #264]	; (800196c <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	e003      	b.n	8001872 <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	7afb      	ldrb	r3, [r7, #11]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800187a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	3301      	adds	r3, #1
 800188e:	4a36      	ldr	r2, [pc, #216]	; (8001968 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	dd04      	ble.n	80018b0 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	e003      	b.n	80018b8 <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	3308      	adds	r3, #8
 80018be:	4a2d      	ldr	r2, [pc, #180]	; (8001974 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80018c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	3302      	adds	r3, #2
 80018d4:	4a24      	ldr	r2, [pc, #144]	; (8001968 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	dd04      	ble.n	80018f6 <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	4619      	mov	r1, r3
 80018f4:	e003      	b.n	80018fe <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	3310      	adds	r3, #16
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3301      	adds	r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	72fb      	strb	r3, [r7, #11]
 8001914:	7afb      	ldrb	r3, [r7, #11]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b07      	cmp	r3, #7
 800191a:	d98e      	bls.n	800183a <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	e014      	b.n	8001956 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b06      	cmp	r3, #6
 8001934:	d80f      	bhi.n	8001956 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8001936:	2260      	movs	r2, #96	; 0x60
 8001938:	2100      	movs	r1, #0
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800193c:	f002 fa3c 	bl	8003db8 <memset>
        BUF_COUNTER++;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	3301      	adds	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	e002      	b.n	8001956 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001950:	bf00      	nop
 8001952:	e000      	b.n	8001956 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001954:	bf00      	nop
    }
}
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000014c 	.word	0x2000014c
 8001960:	20000104 	.word	0x20000104
 8001964:	20000100 	.word	0x20000100
 8001968:	20000030 	.word	0x20000030
 800196c:	2000002c 	.word	0x2000002c
 8001970:	2000002d 	.word	0x2000002d
 8001974:	20000040 	.word	0x20000040

08001978 <app_main>:
 */
#include "app_main.h"
#include "Inc/main.h"
#include "ARGB.h"
void app_main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	 ARGB_Init();  // Initialization
 800197c:	f7ff f9e8 	bl	8000d50 <ARGB_Init>

	    ARGB_Clear(); // Clear stirp
 8001980:	f7ff fa5e 	bl	8000e40 <ARGB_Clear>
	    while (ARGB_Show() != ARGB_OK); // Update - Option 1
 8001984:	bf00      	nop
 8001986:	f7ff fb45 	bl	8001014 <ARGB_Show>
 800198a:	4603      	mov	r3, r0
 800198c:	2b02      	cmp	r3, #2
 800198e:	d1fa      	bne.n	8001986 <app_main+0xe>

	    ARGB_SetBrightness(100);  // Set global brightness to 40%
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	f7ff fa5f 	bl	8000e54 <ARGB_SetBrightness>

	    ARGB_SetHSV(0, 0, 255, 255); // Set LED №1 with Red
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	22ff      	movs	r2, #255	; 0xff
 800199a:	2100      	movs	r1, #0
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fae5 	bl	8000f6c <ARGB_SetHSV>
	    while (!ARGB_Ready()); // Update - Option 3
 80019a2:	bf00      	nop
 80019a4:	f7ff fb2a 	bl	8000ffc <ARGB_Ready>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0fa      	beq.n	80019a4 <app_main+0x2c>
	    ARGB_Show();
 80019ae:	f7ff fb31 	bl	8001014 <ARGB_Show>
	/*while(1)
	{
	  HAL_Delay(500);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}*/
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f000 fa6f 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f809 	bl	80019d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c2:	f000 f90b 	bl	8001bdc <MX_GPIO_Init>
  MX_DMA_Init();
 80019c6:	f000 f8eb 	bl	8001ba0 <MX_DMA_Init>
  MX_TIM1_Init();
 80019ca:	f000 f849 	bl	8001a60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  app_main();
 80019ce:	f7ff ffd3 	bl	8001978 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <main+0x1c>

080019d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b090      	sub	sp, #64	; 0x40
 80019d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019da:	f107 0318 	add.w	r3, r7, #24
 80019de:	2228      	movs	r2, #40	; 0x28
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 f9e8 	bl	8003db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 ffd3 	bl	80029c8 <HAL_RCC_OscConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a28:	f000 f924 	bl	8001c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a30:	2302      	movs	r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2102      	movs	r1, #2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fa40 	bl	8002ecc <HAL_RCC_ClockConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a52:	f000 f90f 	bl	8001c74 <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3740      	adds	r7, #64	; 0x40
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b096      	sub	sp, #88	; 0x58
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	615a      	str	r2, [r3, #20]
 8001a90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2220      	movs	r2, #32
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 f98d 	bl	8003db8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001aa0:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <MX_TIM1_Init+0x13c>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aa4:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aca:	4833      	ldr	r0, [pc, #204]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001acc:	f001 fb78 	bl	80031c0 <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001ad6:	f000 f8cd 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	482c      	ldr	r0, [pc, #176]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001ae8:	f001 fcd4 	bl	8003494 <HAL_TIM_ConfigClockSource>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001af2:	f000 f8bf 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af6:	4828      	ldr	r0, [pc, #160]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001af8:	f001 fbb1 	bl	800325e <HAL_TIM_PWM_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b02:	f000 f8b7 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b12:	4619      	mov	r1, r3
 8001b14:	4820      	ldr	r0, [pc, #128]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001b16:	f002 f87b 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b20:	f000 f8a8 	bl	8001c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	2200      	movs	r2, #0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4813      	ldr	r0, [pc, #76]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001b4a:	f001 fbe1 	bl	8003310 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b54:	f000 f88e 	bl	8001c74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001b7c:	f002 f8a6 	bl	8003ccc <HAL_TIMEx_ConfigBreakDeadTime>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001b86:	f000 f875 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b8a:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM1_Init+0x138>)
 8001b8c:	f000 f8f4 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 8001b90:	bf00      	nop
 8001b92:	3758      	adds	r7, #88	; 0x58
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000104 	.word	0x20000104
 8001b9c:	40012c00 	.word	0x40012c00

08001ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_DMA_Init+0x38>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <MX_DMA_Init+0x38>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6153      	str	r3, [r2, #20]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_DMA_Init+0x38>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	200c      	movs	r0, #12
 8001bc4:	f000 fac7 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bc8:	200c      	movs	r0, #12
 8001bca:	f000 fae0 	bl	800218e <HAL_NVIC_EnableIRQ>

}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000

08001bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf0:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a17      	ldr	r2, [pc, #92]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001c0e:	f043 0320 	orr.w	r3, r3, #32
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_GPIO_Init+0x90>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_GPIO_Init+0x94>)
 8001c40:	f000 feaa 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4804      	ldr	r0, [pc, #16]	; (8001c70 <MX_GPIO_Init+0x94>)
 8001c5e:	f000 fd17 	bl	8002690 <HAL_GPIO_Init>

}
 8001c62:	bf00      	nop
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40011000 	.word	0x40011000

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <Error_Handler+0x8>
	...

08001c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_MspInit+0x5c>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_MspInit+0x5c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6193      	str	r3, [r2, #24]
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_MspInit+0x5c>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_MspInit+0x5c>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_MspInit+0x5c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x5c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_MspInit+0x60>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_MspInit+0x60>)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_TIM_Base_MspInit+0x84>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d134      	bne.n	8001d60 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_TIM_Base_MspInit+0x88>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_TIM_Base_MspInit+0x88>)
 8001cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d00:	6193      	str	r3, [r2, #24]
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_TIM_Base_MspInit+0x88>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_TIM_Base_MspInit+0x90>)
 8001d12:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d16:	2210      	movs	r2, #16
 8001d18:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d34:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d38:	2220      	movs	r2, #32
 8001d3a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d3e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d44:	480a      	ldr	r0, [pc, #40]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d46:	f000 fa3d 	bl	80021c4 <HAL_DMA_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8001d50:	f7ff ff90 	bl	8001c74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_TIM_Base_MspInit+0x8c>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40012c00 	.word	0x40012c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	2000014c 	.word	0x2000014c
 8001d74:	4002001c 	.word	0x4002001c

08001d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_TIM_MspPostInit+0x5c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d118      	bne.n	8001dca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_TIM_MspPostInit+0x60>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <HAL_TIM_MspPostInit+0x60>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_TIM_MspPostInit+0x60>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db6:	2312      	movs	r3, #18
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_TIM_MspPostInit+0x64>)
 8001dc6:	f000 fc63 	bl	8002690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010800 	.word	0x40010800

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e26:	f000 f87f 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA1_Channel2_IRQHandler+0x10>)
 8001e36:	f000 faf7 	bl	8002428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000014c 	.word	0x2000014c

08001e44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e50:	f7ff fff8 	bl	8001e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e56:	490c      	ldr	r1, [pc, #48]	; (8001e88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e6c:	4c09      	ldr	r4, [pc, #36]	; (8001e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f001 ff79 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e7e:	f7ff fd9a 	bl	80019b6 <main>
  bx lr
 8001e82:	4770      	bx	lr
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e8c:	08003e98 	.word	0x08003e98
  ldr r2, =_sbss
 8001e90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e94:	20000194 	.word	0x20000194

08001e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC1_2_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_Init+0x28>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_Init+0x28>)
 8001ea6:	f043 0310 	orr.w	r3, r3, #16
 8001eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 f947 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f808 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fee2 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_InitTick+0x54>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_InitTick+0x58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f95f 	bl	80021aa <HAL_SYSTICK_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00e      	b.n	8001f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d80a      	bhi.n	8001f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f927 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <HAL_InitTick+0x5c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	2000000c 	.word	0x2000000c
 8001f24:	20000008 	.word	0x20000008

08001f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_IncTick+0x1c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_IncTick+0x20>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a03      	ldr	r2, [pc, #12]	; (8001f48 <HAL_IncTick+0x20>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	2000000c 	.word	0x2000000c
 8001f48:	20000190 	.word	0x20000190

08001f4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <HAL_GetTick+0x10>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000190 	.word	0x20000190

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fff0 	bl	8001f4c <HAL_GetTick>
 8001f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f86:	bf00      	nop
 8001f88:	f7ff ffe0 	bl	8001f4c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
  {
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000000c 	.word	0x2000000c

08001fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4906      	ldr	r1, [pc, #24]	; (8002040 <__NVIC_EnableIRQ+0x34>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff90 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff2d 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff42 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff90 	bl	8002098 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5f 	bl	8002044 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff35 	bl	800200c <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e043      	b.n	8002262 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_DMA_Init+0xa8>)
 80021e2:	4413      	add	r3, r2
 80021e4:	4a22      	ldr	r2, [pc, #136]	; (8002270 <HAL_DMA_Init+0xac>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	009a      	lsls	r2, r3, #2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <HAL_DMA_Init+0xb0>)
 80021f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800220e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002212:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800221c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	bffdfff8 	.word	0xbffdfff8
 8002270:	cccccccd 	.word	0xcccccccd
 8002274:	40020000 	.word	0x40020000

08002278 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Start_IT+0x20>
 8002294:	2302      	movs	r3, #2
 8002296:	e04b      	b.n	8002330 <HAL_DMA_Start_IT+0xb8>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d13a      	bne.n	8002322 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f9af 	bl	8002634 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 020e 	orr.w	r2, r2, #14
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e00f      	b.n	8002310 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 020a 	orr.w	r2, r2, #10
 800230e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e005      	b.n	800232e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800232a:	2302      	movs	r3, #2
 800232c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800232e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d005      	beq.n	800235c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2204      	movs	r2, #4
 8002354:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e051      	b.n	8002400 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 020e 	bic.w	r2, r2, #14
 800236a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a22      	ldr	r2, [pc, #136]	; (800240c <HAL_DMA_Abort_IT+0xd4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d029      	beq.n	80023da <HAL_DMA_Abort_IT+0xa2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_DMA_Abort_IT+0xd8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_Abort_IT+0x9e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_DMA_Abort_IT+0xdc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01a      	beq.n	80023d0 <HAL_DMA_Abort_IT+0x98>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_DMA_Abort_IT+0xe0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d012      	beq.n	80023ca <HAL_DMA_Abort_IT+0x92>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_DMA_Abort_IT+0xe4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00a      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x8c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_DMA_Abort_IT+0xe8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d102      	bne.n	80023be <HAL_DMA_Abort_IT+0x86>
 80023b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023bc:	e00e      	b.n	80023dc <HAL_DMA_Abort_IT+0xa4>
 80023be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c2:	e00b      	b.n	80023dc <HAL_DMA_Abort_IT+0xa4>
 80023c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c8:	e008      	b.n	80023dc <HAL_DMA_Abort_IT+0xa4>
 80023ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ce:	e005      	b.n	80023dc <HAL_DMA_Abort_IT+0xa4>
 80023d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d4:	e002      	b.n	80023dc <HAL_DMA_Abort_IT+0xa4>
 80023d6:	2310      	movs	r3, #16
 80023d8:	e000      	b.n	80023dc <HAL_DMA_Abort_IT+0xa4>
 80023da:	2301      	movs	r3, #1
 80023dc:	4a11      	ldr	r2, [pc, #68]	; (8002424 <HAL_DMA_Abort_IT+0xec>)
 80023de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
    } 
  }
  return status;
 8002400:	7bfb      	ldrb	r3, [r7, #15]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40020008 	.word	0x40020008
 8002410:	4002001c 	.word	0x4002001c
 8002414:	40020030 	.word	0x40020030
 8002418:	40020044 	.word	0x40020044
 800241c:	40020058 	.word	0x40020058
 8002420:	4002006c 	.word	0x4002006c
 8002424:	40020000 	.word	0x40020000

08002428 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2204      	movs	r2, #4
 8002446:	409a      	lsls	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d04f      	beq.n	80024f0 <HAL_DMA_IRQHandler+0xc8>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	d04a      	beq.n	80024f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a66      	ldr	r2, [pc, #408]	; (8002618 <HAL_DMA_IRQHandler+0x1f0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d029      	beq.n	80024d6 <HAL_DMA_IRQHandler+0xae>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a65      	ldr	r2, [pc, #404]	; (800261c <HAL_DMA_IRQHandler+0x1f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_IRQHandler+0xaa>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a63      	ldr	r2, [pc, #396]	; (8002620 <HAL_DMA_IRQHandler+0x1f8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01a      	beq.n	80024cc <HAL_DMA_IRQHandler+0xa4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a62      	ldr	r2, [pc, #392]	; (8002624 <HAL_DMA_IRQHandler+0x1fc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d012      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x9e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a60      	ldr	r2, [pc, #384]	; (8002628 <HAL_DMA_IRQHandler+0x200>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00a      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x98>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a5f      	ldr	r2, [pc, #380]	; (800262c <HAL_DMA_IRQHandler+0x204>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <HAL_DMA_IRQHandler+0x92>
 80024b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024b8:	e00e      	b.n	80024d8 <HAL_DMA_IRQHandler+0xb0>
 80024ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024be:	e00b      	b.n	80024d8 <HAL_DMA_IRQHandler+0xb0>
 80024c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024c4:	e008      	b.n	80024d8 <HAL_DMA_IRQHandler+0xb0>
 80024c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ca:	e005      	b.n	80024d8 <HAL_DMA_IRQHandler+0xb0>
 80024cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d0:	e002      	b.n	80024d8 <HAL_DMA_IRQHandler+0xb0>
 80024d2:	2340      	movs	r3, #64	; 0x40
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_IRQHandler+0xb0>
 80024d6:	2304      	movs	r3, #4
 80024d8:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_DMA_IRQHandler+0x208>)
 80024da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8094 	beq.w	800260e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024ee:	e08e      	b.n	800260e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2202      	movs	r2, #2
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d056      	beq.n	80025ae <HAL_DMA_IRQHandler+0x186>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d051      	beq.n	80025ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 020a 	bic.w	r2, r2, #10
 8002526:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a38      	ldr	r2, [pc, #224]	; (8002618 <HAL_DMA_IRQHandler+0x1f0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d029      	beq.n	800258e <HAL_DMA_IRQHandler+0x166>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a37      	ldr	r2, [pc, #220]	; (800261c <HAL_DMA_IRQHandler+0x1f4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <HAL_DMA_IRQHandler+0x162>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a35      	ldr	r2, [pc, #212]	; (8002620 <HAL_DMA_IRQHandler+0x1f8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x15c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a34      	ldr	r2, [pc, #208]	; (8002624 <HAL_DMA_IRQHandler+0x1fc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d012      	beq.n	800257e <HAL_DMA_IRQHandler+0x156>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a32      	ldr	r2, [pc, #200]	; (8002628 <HAL_DMA_IRQHandler+0x200>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00a      	beq.n	8002578 <HAL_DMA_IRQHandler+0x150>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a31      	ldr	r2, [pc, #196]	; (800262c <HAL_DMA_IRQHandler+0x204>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d102      	bne.n	8002572 <HAL_DMA_IRQHandler+0x14a>
 800256c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002570:	e00e      	b.n	8002590 <HAL_DMA_IRQHandler+0x168>
 8002572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002576:	e00b      	b.n	8002590 <HAL_DMA_IRQHandler+0x168>
 8002578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257c:	e008      	b.n	8002590 <HAL_DMA_IRQHandler+0x168>
 800257e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002582:	e005      	b.n	8002590 <HAL_DMA_IRQHandler+0x168>
 8002584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002588:	e002      	b.n	8002590 <HAL_DMA_IRQHandler+0x168>
 800258a:	2320      	movs	r3, #32
 800258c:	e000      	b.n	8002590 <HAL_DMA_IRQHandler+0x168>
 800258e:	2302      	movs	r3, #2
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <HAL_DMA_IRQHandler+0x208>)
 8002592:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d034      	beq.n	800260e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025ac:	e02f      	b.n	800260e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2208      	movs	r2, #8
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d028      	beq.n	8002610 <HAL_DMA_IRQHandler+0x1e8>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d023      	beq.n	8002610 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020e 	bic.w	r2, r2, #14
 80025d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f202 	lsl.w	r2, r1, r2
 80025e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
    }
  }
  return;
 800260e:	bf00      	nop
 8002610:	bf00      	nop
}
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40020008 	.word	0x40020008
 800261c:	4002001c 	.word	0x4002001c
 8002620:	40020030 	.word	0x40020030
 8002624:	40020044 	.word	0x40020044
 8002628:	40020058 	.word	0x40020058
 800262c:	4002006c 	.word	0x4002006c
 8002630:	40020000 	.word	0x40020000

08002634 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b10      	cmp	r3, #16
 8002660:	d108      	bne.n	8002674 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002672:	e007      	b.n	8002684 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	e169      	b.n	8002978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a4:	2201      	movs	r2, #1
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8158 	bne.w	8002972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a9a      	ldr	r2, [pc, #616]	; (8002930 <HAL_GPIO_Init+0x2a0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d05e      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026cc:	4a98      	ldr	r2, [pc, #608]	; (8002930 <HAL_GPIO_Init+0x2a0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d875      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026d2:	4a98      	ldr	r2, [pc, #608]	; (8002934 <HAL_GPIO_Init+0x2a4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d058      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026d8:	4a96      	ldr	r2, [pc, #600]	; (8002934 <HAL_GPIO_Init+0x2a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d86f      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026de:	4a96      	ldr	r2, [pc, #600]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d052      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026e4:	4a94      	ldr	r2, [pc, #592]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d869      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026ea:	4a94      	ldr	r2, [pc, #592]	; (800293c <HAL_GPIO_Init+0x2ac>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d04c      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026f0:	4a92      	ldr	r2, [pc, #584]	; (800293c <HAL_GPIO_Init+0x2ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d863      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026f6:	4a92      	ldr	r2, [pc, #584]	; (8002940 <HAL_GPIO_Init+0x2b0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d046      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026fc:	4a90      	ldr	r2, [pc, #576]	; (8002940 <HAL_GPIO_Init+0x2b0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d85d      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d82a      	bhi.n	800275c <HAL_GPIO_Init+0xcc>
 8002706:	2b12      	cmp	r3, #18
 8002708:	d859      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_GPIO_Init+0x80>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	0800278b 	.word	0x0800278b
 8002714:	08002765 	.word	0x08002765
 8002718:	08002777 	.word	0x08002777
 800271c:	080027b9 	.word	0x080027b9
 8002720:	080027bf 	.word	0x080027bf
 8002724:	080027bf 	.word	0x080027bf
 8002728:	080027bf 	.word	0x080027bf
 800272c:	080027bf 	.word	0x080027bf
 8002730:	080027bf 	.word	0x080027bf
 8002734:	080027bf 	.word	0x080027bf
 8002738:	080027bf 	.word	0x080027bf
 800273c:	080027bf 	.word	0x080027bf
 8002740:	080027bf 	.word	0x080027bf
 8002744:	080027bf 	.word	0x080027bf
 8002748:	080027bf 	.word	0x080027bf
 800274c:	080027bf 	.word	0x080027bf
 8002750:	080027bf 	.word	0x080027bf
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002781 	.word	0x08002781
 800275c:	4a79      	ldr	r2, [pc, #484]	; (8002944 <HAL_GPIO_Init+0x2b4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002762:	e02c      	b.n	80027be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e029      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	3304      	adds	r3, #4
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e024      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e01f      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	330c      	adds	r3, #12
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e01a      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002792:	2304      	movs	r3, #4
 8002794:	623b      	str	r3, [r7, #32]
          break;
 8002796:	e013      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a0:	2308      	movs	r3, #8
 80027a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	611a      	str	r2, [r3, #16]
          break;
 80027aa:	e009      	b.n	80027c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	615a      	str	r2, [r3, #20]
          break;
 80027b6:	e003      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          break;
 80027be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2bff      	cmp	r3, #255	; 0xff
 80027c4:	d801      	bhi.n	80027ca <HAL_GPIO_Init+0x13a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_Init+0x13e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d802      	bhi.n	80027dc <HAL_GPIO_Init+0x14c>
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x152>
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	3b08      	subs	r3, #8
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	210f      	movs	r1, #15
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b1 	beq.w	8002972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002810:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002828:	4a48      	ldr	r2, [pc, #288]	; (800294c <HAL_GPIO_Init+0x2bc>)
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a40      	ldr	r2, [pc, #256]	; (8002950 <HAL_GPIO_Init+0x2c0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_GPIO_Init+0x1ec>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3f      	ldr	r2, [pc, #252]	; (8002954 <HAL_GPIO_Init+0x2c4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00d      	beq.n	8002878 <HAL_GPIO_Init+0x1e8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3e      	ldr	r2, [pc, #248]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <HAL_GPIO_Init+0x1e4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3d      	ldr	r2, [pc, #244]	; (800295c <HAL_GPIO_Init+0x2cc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_GPIO_Init+0x1e0>
 800286c:	2303      	movs	r3, #3
 800286e:	e006      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002870:	2304      	movs	r3, #4
 8002872:	e004      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002874:	2302      	movs	r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 800287c:	2300      	movs	r3, #0
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288e:	492f      	ldr	r1, [pc, #188]	; (800294c <HAL_GPIO_Init+0x2bc>)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4928      	ldr	r1, [pc, #160]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4922      	ldr	r1, [pc, #136]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	491e      	ldr	r1, [pc, #120]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4918      	ldr	r1, [pc, #96]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	4914      	ldr	r1, [pc, #80]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002910:	4013      	ands	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d021      	beq.n	8002964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	490e      	ldr	r1, [pc, #56]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e021      	b.n	8002972 <HAL_GPIO_Init+0x2e2>
 800292e:	bf00      	nop
 8002930:	10320000 	.word	0x10320000
 8002934:	10310000 	.word	0x10310000
 8002938:	10220000 	.word	0x10220000
 800293c:	10210000 	.word	0x10210000
 8002940:	10120000 	.word	0x10120000
 8002944:	10110000 	.word	0x10110000
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	40010800 	.word	0x40010800
 8002954:	40010c00 	.word	0x40010c00
 8002958:	40011000 	.word	0x40011000
 800295c:	40011400 	.word	0x40011400
 8002960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_GPIO_Init+0x304>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	43db      	mvns	r3, r3
 800296c:	4909      	ldr	r1, [pc, #36]	; (8002994 <HAL_GPIO_Init+0x304>)
 800296e:	4013      	ands	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	3301      	adds	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f47f ae8e 	bne.w	80026a4 <HAL_GPIO_Init+0x14>
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	372c      	adds	r7, #44	; 0x2c
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	611a      	str	r2, [r3, #16]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e272      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8087 	beq.w	8002af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e8:	4b92      	ldr	r3, [pc, #584]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d00c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f4:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d112      	bne.n	8002a26 <HAL_RCC_OscConfig+0x5e>
 8002a00:	4b8c      	ldr	r3, [pc, #560]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d10b      	bne.n	8002a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0e:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d06c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x12c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d168      	bne.n	8002af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e24c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x76>
 8002a30:	4b80      	ldr	r3, [pc, #512]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a7f      	ldr	r2, [pc, #508]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	e02e      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x98>
 8002a46:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7a      	ldr	r2, [pc, #488]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b78      	ldr	r3, [pc, #480]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a77      	ldr	r2, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e01d      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0xbc>
 8002a6a:	4b72      	ldr	r3, [pc, #456]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a71      	ldr	r2, [pc, #452]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a6e      	ldr	r2, [pc, #440]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0xd4>
 8002a84:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff fa52 	bl	8001f4c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7ff fa4e 	bl	8001f4c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e200      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b5d      	ldr	r3, [pc, #372]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0xe4>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff fa3e 	bl	8001f4c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7ff fa3a 	bl	8001f4c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1ec      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x10c>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d063      	beq.n	8002bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b0e:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d11c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x18c>
 8002b1a:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_RCC_OscConfig+0x176>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1c0      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4939      	ldr	r1, [pc, #228]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b52:	e03a      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7ff f9f3 	bl	8001f4c <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7ff f9ef 	bl	8001f4c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e1a1      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4927      	ldr	r1, [pc, #156]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff f9d2 	bl	8001f4c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bac:	f7ff f9ce 	bl	8001f4c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e180      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d03a      	beq.n	8002c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d019      	beq.n	8002c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7ff f9b2 	bl	8001f4c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7ff f9ae 	bl	8001f4c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e160      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f000 faba 	bl	8003184 <RCC_Delay>
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_RCC_OscConfig+0x274>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c18:	f7ff f998 	bl	8001f4c <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1e:	e00f      	b.n	8002c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c20:	f7ff f994 	bl	8001f4c <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d908      	bls.n	8002c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e146      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	42420000 	.word	0x42420000
 8002c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b92      	ldr	r3, [pc, #584]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e9      	bne.n	8002c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a6 	beq.w	8002da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b8b      	ldr	r3, [pc, #556]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b88      	ldr	r3, [pc, #544]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4a87      	ldr	r2, [pc, #540]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	61d3      	str	r3, [r2, #28]
 8002c76:	4b85      	ldr	r3, [pc, #532]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_RCC_OscConfig+0x4c8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x4c8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7e      	ldr	r2, [pc, #504]	; (8002e90 <HAL_RCC_OscConfig+0x4c8>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7ff f955 	bl	8001f4c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7ff f951 	bl	8001f4c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e103      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b75      	ldr	r3, [pc, #468]	; (8002e90 <HAL_RCC_OscConfig+0x4c8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x312>
 8002ccc:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	e02d      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x334>
 8002ce2:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a69      	ldr	r2, [pc, #420]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6213      	str	r3, [r2, #32]
 8002cee:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a66      	ldr	r2, [pc, #408]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	e01c      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x356>
 8002d04:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a60      	ldr	r2, [pc, #384]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCC_OscConfig+0x36e>
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a5a      	ldr	r2, [pc, #360]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d015      	beq.n	8002d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7ff f905 	bl	8001f4c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7ff f901 	bl	8001f4c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0b1      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ee      	beq.n	8002d46 <HAL_RCC_OscConfig+0x37e>
 8002d68:	e014      	b.n	8002d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6a:	f7ff f8ef 	bl	8001f4c <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7ff f8eb 	bl	8001f4c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e09b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d88:	4b40      	ldr	r3, [pc, #256]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ee      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9a:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4a3b      	ldr	r2, [pc, #236]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8087 	beq.w	8002ebe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db0:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d061      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d146      	bne.n	8002e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7ff f8bf 	bl	8001f4c <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7ff f8bb 	bl	8001f4c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e06d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4921      	ldr	r1, [pc, #132]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a19      	ldr	r1, [r3, #32]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	491b      	ldr	r1, [pc, #108]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7ff f88f 	bl	8001f4c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e32:	f7ff f88b 	bl	8001f4c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e03d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x46a>
 8002e50:	e035      	b.n	8002ebe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_OscConfig+0x4cc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7ff f878 	bl	8001f4c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7ff f874 	bl	8001f4c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e026      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x498>
 8002e7e:	e01e      	b.n	8002ebe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e019      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
 8002e94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_OscConfig+0x500>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0d0      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 0207 	bic.w	r2, r3, #7
 8002ef6:	4965      	ldr	r1, [pc, #404]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d040      	beq.n	8002fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d115      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e073      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4936      	ldr	r1, [pc, #216]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe ffc6 	bl	8001f4c <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fe ffc2 	bl	8001f4c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e053      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d210      	bcs.n	800301c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	4922      	ldr	r1, [pc, #136]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f821 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x1c8>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1cc>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1d0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe ff24 	bl	8001ec8 <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40022000 	.word	0x40022000
 8003090:	40021000 	.word	0x40021000
 8003094:	08003e64 	.word	0x08003e64
 8003098:	20000004 	.word	0x20000004
 800309c:	20000008 	.word	0x20000008

080030a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_RCC_GetSysClockFreq+0x94>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x30>
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x36>
 80030ce:	e027      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_GetSysClockFreq+0x98>)
 80030d2:	613b      	str	r3, [r7, #16]
      break;
 80030d4:	e027      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	0c9b      	lsrs	r3, r3, #18
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_RCC_GetSysClockFreq+0x94>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	0c5b      	lsrs	r3, r3, #17
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	4a11      	ldr	r2, [pc, #68]	; (8003140 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <HAL_RCC_GetSysClockFreq+0x98>)
 8003102:	fb03 f202 	mul.w	r2, r3, r2
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e004      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	613b      	str	r3, [r7, #16]
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetSysClockFreq+0x98>)
 8003122:	613b      	str	r3, [r7, #16]
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	693b      	ldr	r3, [r7, #16]
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	007a1200 	.word	0x007a1200
 800313c:	08003e7c 	.word	0x08003e7c
 8003140:	08003e8c 	.word	0x08003e8c
 8003144:	003d0900 	.word	0x003d0900

08003148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800314c:	4b02      	ldr	r3, [pc, #8]	; (8003158 <HAL_RCC_GetHCLKFreq+0x10>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003160:	f7ff fff2 	bl	8003148 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	08003e74 	.word	0x08003e74

08003184 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <RCC_Delay+0x34>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <RCC_Delay+0x38>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0a5b      	lsrs	r3, r3, #9
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a0:	bf00      	nop
  }
  while (Delay --);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	60fa      	str	r2, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f9      	bne.n	80031a0 <RCC_Delay+0x1c>
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	20000004 	.word	0x20000004
 80031bc:	10624dd3 	.word	0x10624dd3

080031c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e041      	b.n	8003256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fd7c 	bl	8001ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f000 fa62 	bl	80036c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e041      	b.n	80032f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f839 	bl	80032fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f000 fa13 	bl	80036c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
	...

08003310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800332a:	2302      	movs	r3, #2
 800332c:	e0ae      	b.n	800348c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	f200 809f 	bhi.w	800347c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	08003379 	.word	0x08003379
 8003348:	0800347d 	.word	0x0800347d
 800334c:	0800347d 	.word	0x0800347d
 8003350:	0800347d 	.word	0x0800347d
 8003354:	080033b9 	.word	0x080033b9
 8003358:	0800347d 	.word	0x0800347d
 800335c:	0800347d 	.word	0x0800347d
 8003360:	0800347d 	.word	0x0800347d
 8003364:	080033fb 	.word	0x080033fb
 8003368:	0800347d 	.word	0x0800347d
 800336c:	0800347d 	.word	0x0800347d
 8003370:	0800347d 	.word	0x0800347d
 8003374:	0800343b 	.word	0x0800343b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fa04 	bl	800378c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0208 	orr.w	r2, r2, #8
 8003392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6999      	ldr	r1, [r3, #24]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	619a      	str	r2, [r3, #24]
      break;
 80033b6:	e064      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fa4a 	bl	8003858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6999      	ldr	r1, [r3, #24]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	619a      	str	r2, [r3, #24]
      break;
 80033f8:	e043      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fa93 	bl	800392c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0208 	orr.w	r2, r2, #8
 8003414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0204 	bic.w	r2, r2, #4
 8003424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69d9      	ldr	r1, [r3, #28]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	61da      	str	r2, [r3, #28]
      break;
 8003438:	e023      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fadd 	bl	8003a00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69d9      	ldr	r1, [r3, #28]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	021a      	lsls	r2, r3, #8
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	61da      	str	r2, [r3, #28]
      break;
 800347a:	e002      	b.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	75fb      	strb	r3, [r7, #23]
      break;
 8003480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800348a:	7dfb      	ldrb	r3, [r7, #23]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0b4      	b.n	800361a <HAL_TIM_ConfigClockSource+0x186>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e8:	d03e      	beq.n	8003568 <HAL_TIM_ConfigClockSource+0xd4>
 80034ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ee:	f200 8087 	bhi.w	8003600 <HAL_TIM_ConfigClockSource+0x16c>
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f6:	f000 8086 	beq.w	8003606 <HAL_TIM_ConfigClockSource+0x172>
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fe:	d87f      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x16c>
 8003500:	2b70      	cmp	r3, #112	; 0x70
 8003502:	d01a      	beq.n	800353a <HAL_TIM_ConfigClockSource+0xa6>
 8003504:	2b70      	cmp	r3, #112	; 0x70
 8003506:	d87b      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x16c>
 8003508:	2b60      	cmp	r3, #96	; 0x60
 800350a:	d050      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x11a>
 800350c:	2b60      	cmp	r3, #96	; 0x60
 800350e:	d877      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b50      	cmp	r3, #80	; 0x50
 8003512:	d03c      	beq.n	800358e <HAL_TIM_ConfigClockSource+0xfa>
 8003514:	2b50      	cmp	r3, #80	; 0x50
 8003516:	d873      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d058      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x13a>
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d86f      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b30      	cmp	r3, #48	; 0x30
 8003522:	d064      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x15a>
 8003524:	2b30      	cmp	r3, #48	; 0x30
 8003526:	d86b      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b20      	cmp	r3, #32
 800352a:	d060      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x15a>
 800352c:	2b20      	cmp	r3, #32
 800352e:	d867      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05c      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x15a>
 8003534:	2b10      	cmp	r3, #16
 8003536:	d05a      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x15a>
 8003538:	e062      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f000 fb1e 	bl	8003b8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800355c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	609a      	str	r2, [r3, #8]
      break;
 8003566:	e04f      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6899      	ldr	r1, [r3, #8]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f000 fb07 	bl	8003b8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800358a:	609a      	str	r2, [r3, #8]
      break;
 800358c:	e03c      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	461a      	mov	r2, r3
 800359c:	f000 fa7e 	bl	8003a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2150      	movs	r1, #80	; 0x50
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fad5 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80035ac:	e02c      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f000 fa9c 	bl	8003af8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2160      	movs	r1, #96	; 0x60
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fac5 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80035cc:	e01c      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fa5e 	bl	8003a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2140      	movs	r1, #64	; 0x40
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fab5 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e00c      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f000 faac 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80035fe:	e003      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
      break;
 8003604:	e000      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d107      	bne.n	800365c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800365a:	e02a      	b.n	80036b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d107      	bne.n	8003676 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003674:	e01d      	b.n	80036b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d107      	bne.n	8003690 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2204      	movs	r2, #4
 8003684:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368e:	e010      	b.n	80036b2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	429a      	cmp	r2, r3
 8003698:	d107      	bne.n	80036aa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2208      	movs	r2, #8
 800369e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a8:	e003      	b.n	80036b2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff ffb5 	bl	8003622 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	771a      	strb	r2, [r3, #28]
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a29      	ldr	r2, [pc, #164]	; (8003780 <TIM_Base_SetConfig+0xb8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00b      	beq.n	80036f8 <TIM_Base_SetConfig+0x30>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e6:	d007      	beq.n	80036f8 <TIM_Base_SetConfig+0x30>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a26      	ldr	r2, [pc, #152]	; (8003784 <TIM_Base_SetConfig+0xbc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_Base_SetConfig+0x30>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a25      	ldr	r2, [pc, #148]	; (8003788 <TIM_Base_SetConfig+0xc0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d108      	bne.n	800370a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <TIM_Base_SetConfig+0xb8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00b      	beq.n	800372a <TIM_Base_SetConfig+0x62>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003718:	d007      	beq.n	800372a <TIM_Base_SetConfig+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a19      	ldr	r2, [pc, #100]	; (8003784 <TIM_Base_SetConfig+0xbc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d003      	beq.n	800372a <TIM_Base_SetConfig+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <TIM_Base_SetConfig+0xc0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d108      	bne.n	800373c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a07      	ldr	r2, [pc, #28]	; (8003780 <TIM_Base_SetConfig+0xb8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	615a      	str	r2, [r3, #20]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800

0800378c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f023 0201 	bic.w	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 0302 	bic.w	r3, r3, #2
 80037d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a1c      	ldr	r2, [pc, #112]	; (8003854 <TIM_OC1_SetConfig+0xc8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10c      	bne.n	8003802 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0308 	bic.w	r3, r3, #8
 80037ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <TIM_OC1_SetConfig+0xc8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d111      	bne.n	800382e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40012c00 	.word	0x40012c00

08003858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f023 0210 	bic.w	r2, r3, #16
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f023 0320 	bic.w	r3, r3, #32
 80038a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <TIM_OC2_SetConfig+0xd0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10d      	bne.n	80038d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a14      	ldr	r2, [pc, #80]	; (8003928 <TIM_OC2_SetConfig+0xd0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d113      	bne.n	8003904 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	40012c00 	.word	0x40012c00

0800392c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0303 	bic.w	r3, r3, #3
 8003962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <TIM_OC3_SetConfig+0xd0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10d      	bne.n	80039a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a14      	ldr	r2, [pc, #80]	; (80039fc <TIM_OC3_SetConfig+0xd0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d113      	bne.n	80039d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40012c00 	.word	0x40012c00

08003a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	031b      	lsls	r3, r3, #12
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <TIM_OC4_SetConfig+0x98>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d109      	bne.n	8003a74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	40012c00 	.word	0x40012c00

08003a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f023 0201 	bic.w	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f023 030a 	bic.w	r3, r3, #10
 8003ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f023 0210 	bic.w	r2, r3, #16
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	031b      	lsls	r3, r3, #12
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f043 0307 	orr.w	r3, r3, #7
 8003b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b087      	sub	sp, #28
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	021a      	lsls	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	609a      	str	r2, [r3, #8]
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2201      	movs	r2, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1a      	ldr	r2, [r3, #32]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	401a      	ands	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e046      	b.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d009      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a10      	ldr	r2, [pc, #64]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800

08003ccc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e03d      	b.n	8003d64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
	...

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	2600      	movs	r6, #0
 8003d74:	4d0c      	ldr	r5, [pc, #48]	; (8003da8 <__libc_init_array+0x38>)
 8003d76:	4c0d      	ldr	r4, [pc, #52]	; (8003dac <__libc_init_array+0x3c>)
 8003d78:	1b64      	subs	r4, r4, r5
 8003d7a:	10a4      	asrs	r4, r4, #2
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	f000 f864 	bl	8003e4c <_init>
 8003d84:	2600      	movs	r6, #0
 8003d86:	4d0a      	ldr	r5, [pc, #40]	; (8003db0 <__libc_init_array+0x40>)
 8003d88:	4c0a      	ldr	r4, [pc, #40]	; (8003db4 <__libc_init_array+0x44>)
 8003d8a:	1b64      	subs	r4, r4, r5
 8003d8c:	10a4      	asrs	r4, r4, #2
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	08003e90 	.word	0x08003e90
 8003dac:	08003e90 	.word	0x08003e90
 8003db0:	08003e90 	.word	0x08003e90
 8003db4:	08003e94 	.word	0x08003e94

08003db8 <memset>:
 8003db8:	4603      	mov	r3, r0
 8003dba:	4402      	add	r2, r0
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <memset+0xa>
 8003dc0:	4770      	bx	lr
 8003dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc6:	e7f9      	b.n	8003dbc <memset+0x4>

08003dc8 <floorf>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8003dce:	3d7f      	subs	r5, #127	; 0x7f
 8003dd0:	2d16      	cmp	r5, #22
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003dda:	dc26      	bgt.n	8003e2a <floorf+0x62>
 8003ddc:	2d00      	cmp	r5, #0
 8003dde:	da0e      	bge.n	8003dfe <floorf+0x36>
 8003de0:	4917      	ldr	r1, [pc, #92]	; (8003e40 <floorf+0x78>)
 8003de2:	f7fc fcc1 	bl	8000768 <__addsf3>
 8003de6:	2100      	movs	r1, #0
 8003de8:	f7fc ff82 	bl	8000cf0 <__aeabi_fcmpgt>
 8003dec:	b128      	cbz	r0, 8003dfa <floorf+0x32>
 8003dee:	2c00      	cmp	r4, #0
 8003df0:	da23      	bge.n	8003e3a <floorf+0x72>
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <floorf+0x7c>)
 8003df4:	2e00      	cmp	r6, #0
 8003df6:	bf18      	it	ne
 8003df8:	461c      	movne	r4, r3
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	e01b      	b.n	8003e36 <floorf+0x6e>
 8003dfe:	4e12      	ldr	r6, [pc, #72]	; (8003e48 <floorf+0x80>)
 8003e00:	412e      	asrs	r6, r5
 8003e02:	4230      	tst	r0, r6
 8003e04:	d017      	beq.n	8003e36 <floorf+0x6e>
 8003e06:	490e      	ldr	r1, [pc, #56]	; (8003e40 <floorf+0x78>)
 8003e08:	f7fc fcae 	bl	8000768 <__addsf3>
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f7fc ff6f 	bl	8000cf0 <__aeabi_fcmpgt>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d0f1      	beq.n	8003dfa <floorf+0x32>
 8003e16:	2c00      	cmp	r4, #0
 8003e18:	bfbe      	ittt	lt
 8003e1a:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8003e1e:	fa43 f505 	asrlt.w	r5, r3, r5
 8003e22:	1964      	addlt	r4, r4, r5
 8003e24:	ea24 0406 	bic.w	r4, r4, r6
 8003e28:	e7e7      	b.n	8003dfa <floorf+0x32>
 8003e2a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003e2e:	d302      	bcc.n	8003e36 <floorf+0x6e>
 8003e30:	f7fc fc9a 	bl	8000768 <__addsf3>
 8003e34:	4601      	mov	r1, r0
 8003e36:	4608      	mov	r0, r1
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
 8003e3a:	2400      	movs	r4, #0
 8003e3c:	e7dd      	b.n	8003dfa <floorf+0x32>
 8003e3e:	bf00      	nop
 8003e40:	7149f2ca 	.word	0x7149f2ca
 8003e44:	bf800000 	.word	0xbf800000
 8003e48:	007fffff 	.word	0x007fffff

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr
